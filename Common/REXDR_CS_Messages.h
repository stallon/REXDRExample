/* This file, generated by REXDR Compiler for C++ version 1.7.1.2155. Build: Sep 17 2012. 10:31:38. */

#ifndef __REXDR_REXDR_CS_MESSAGES_H_28FB3B4E_4F42_11E2_91E1_005056C00008__
#define __REXDR_REXDR_CS_MESSAGES_H_28FB3B4E_4F42_11E2_91E1_005056C00008__

#include <stdio.h>
#include <string.h>
#include <string>
#include <vector>
#include <list>
#include <map>
#include <sstream>
#include <REXDR/REXDR.h>


#ifndef __REXDR_MESSAGE_CLASS_QUERYUSERSESSIONSTATUS_ID_143663882_DECLARED__
#define __REXDR_MESSAGE_CLASS_QUERYUSERSESSIONSTATUS_ID_143663882_DECLARED__

/* class QueryUserSessionStatus */
class QueryUserSessionStatus : public REXDR::IRequestMessage
{
public:

	/* message id */
	enum { tagMsgID = 143663882 };

protected:

	int32_t _msgID;
	std::string _lastErrorField, _lastErrorDetail;

public:

	/* default data fields for request message */
	const REXDR::Command command;
	REXDR::Resource resource;
	REXDR::Option option;

public:

	/* constructor */
	QueryUserSessionStatus( const std::string& userid = "" ) :
		command( REXDR::CMD_GET ), resource( "/stallon/usersession/%s", userid.c_str() ), option()
	{
		_msgID = tagMsgID;

		/* user-defined member */
	}

	QueryUserSessionStatus( const QueryUserSessionStatus& rhs ) :
		command( REXDR::CMD_GET )
	{
		_msgID = tagMsgID;

		_copy( rhs );
	}

	QueryUserSessionStatus& operator=( const QueryUserSessionStatus& rhs )
	{
		if ( this == &rhs ) {
			return *this;
		}

		_copy( rhs );
		return *this;
	}

private:

	void _copy( const QueryUserSessionStatus& from )
	{
		_msgID = from._msgID;

		_lastErrorField.clear();
		_lastErrorDetail.clear();

		this->resource = from.resource;
		this->option = from.option;

		/* user-defined member */
	}

public:

	/* destructor */
	virtual ~QueryUserSessionStatus()
	{
	}

public:

	/* REXDR::IRequestMessage::Save() */
	virtual bool Save( REXDR::Request* req ) const
	{
		req->messageID = this->GetID();

		req->command = command;
		req->resource = resource;
		req->option = option;

		return Save( &( req->param ) );
	}

protected:

	/* REXDR::IMessage::Save() */
	virtual bool Save( REXDR::Value* value ) const
	{
		value->set( REXDR::Value::TYPE_MAP );

		value->messageID = this->GetID();

		return true;
	}

public:

	/* REXDR::IRequestMessage::Load() */
	virtual bool Load( const REXDR::Request& req )
	{
		/* command */
		if ( command != req.command ) {
			return false;
		}

		/*
		 * resource
		 */
		resource = req.resource;

		/* resource[2]; string userid */
		if ( true == resource[2].empty() ) {
			return false;
		}

		/*
		 * option
		 */
		option = req.option;

		/*
		 * param
		 */
		return Load( req.param );
	}

protected:

	/* REXDR::IMessage::Load() */
	virtual bool Load( const REXDR::Value& value )
	{
		return true;
	}

public:

	std::string GetLastError( size_t depth = 0 ) const
	{
		if ( true == _lastErrorField.empty() ) {
			return "";
		}

		std::string lastError = _lastErrorField;
		if ( 0 == depth ) {
			lastError = "Cannot load \"QueryUserSessionStatus::" + lastError;
		}

		bool detail = false;

		if ( false == detail ) {
			lastError.append( "\"; " ).append( _lastErrorDetail );
		}

		return lastError;
	}

private:

	void SetLastError( const char* field, const char* expected, const REXDR::Value& actual )
	{
		_lastErrorField = field;
		_lastErrorDetail = "expected="; _lastErrorDetail += expected;
		_lastErrorDetail += ", actual="; _lastErrorDetail += REXDR::Value::typeToString( actual.type() );

		if ( REXDR::Value::TYPE_INT == actual.type() ) {
			if ( 0 == ::strncmp( expected, "int", 3 ) || 0 == ::strncmp( expected, "uint", 4 ) ) {
				_lastErrorDetail += " (out of range)";
			}
		}

		if ( REXDR::Value::TYPE_NULL == actual.type() ) {
			_lastErrorDetail += " (null or not exists)";
		}
	}

public:

	/* [RE]XDR::IMessage::Clear() */
	virtual void Clear()
	{
		/* user-defined member */
	}

public:

	/* [RE]XDR::IMessage::GetID() */
	virtual int32_t GetID() const
	{
		return _msgID;
	}

public:

	/* [RE]XDR::IMessage::GetName() */
	virtual const char* GetName() const
	{
		return "QueryUserSessionStatus";
	}

};
/* end of class QueryUserSessionStatus */

#endif /* __REXDR_MESSAGE_CLASS_QUERYUSERSESSIONSTATUS_ID_143663882_DECLARED__ */


#ifndef __REXDR_MESSAGE_CLASS_QUERYUSERSESSIONSTATUSRESPONSE_ID_37667034_DECLARED__
#define __REXDR_MESSAGE_CLASS_QUERYUSERSESSIONSTATUSRESPONSE_ID_37667034_DECLARED__

/* class QueryUserSessionStatusResponse */
class QueryUserSessionStatusResponse : public REXDR::IResponseMessage
{
public:

	/* message id */
	enum { tagMsgID = 37667034 };

protected:

	int32_t _msgID;
	std::string _lastErrorField, _lastErrorDetail;

public:

	/* default data fields for response message */
	REXDR::Status status;

	/* user defined data fields */
	std::string userid;
	uint32_t sessionid;
	std::string gameid;
	std::string channelid;
	uint32_t sessionstatus;
	uint32_t errorcode;

public:

	/* constructor */
	QueryUserSessionStatusResponse()
	{
		_msgID = tagMsgID;

		/* user-defined member */
		sessionid = 0;
		sessionstatus = 0;
		errorcode = 0;
	}

	QueryUserSessionStatusResponse( const QueryUserSessionStatusResponse& rhs )
	{
		_msgID = tagMsgID;

		_copy( rhs );
	}

	QueryUserSessionStatusResponse& operator=( const QueryUserSessionStatusResponse& rhs )
	{
		if ( this == &rhs ) {
			return *this;
		}

		_copy( rhs );
		return *this;
	}

private:

	void _copy( const QueryUserSessionStatusResponse& from )
	{
		_msgID = from._msgID;

		_lastErrorField.clear();
		_lastErrorDetail.clear();

		this->status = from.status;

		/* user-defined member */
		this->userid = from.userid;
		this->sessionid = from.sessionid;
		this->gameid = from.gameid;
		this->channelid = from.channelid;
		this->sessionstatus = from.sessionstatus;
		this->errorcode = from.errorcode;
	}

public:

	/* destructor */
	virtual ~QueryUserSessionStatusResponse()
	{
	}

public:

	/* REXDR::IResponseMessage::Save() */
	virtual bool Save( REXDR::Response* resp ) const
	{
		resp->messageID = this->GetID();

		resp->status = status;

		return Save( &( resp->result ) );
	}

protected:

	/* REXDR::IMessage::Save() */
	virtual bool Save( REXDR::Value* value ) const
	{
		value->set( REXDR::Value::TYPE_MAP );

		/* string userid */
		(*value)["userid"] = this->userid;

		/* uint32_t sessionid */
		(*value)["sessionid"] = this->sessionid;

		/* string gameid */
		(*value)["gameid"] = this->gameid;

		/* string channelid */
		(*value)["channelid"] = this->channelid;

		/* uint32_t sessionstatus */
		(*value)["sessionstatus"] = this->sessionstatus;

		/* uint32_t errorcode */
		(*value)["errorcode"] = this->errorcode;

		value->messageID = this->GetID();

		return true;
	}

public:

	/* REXDR::IResponseMessage::Load() */
	virtual bool Load( const REXDR::Response& resp )
	{
		/* status */
		status = resp.status;

		/*
		 * result
		 */
		return Load( resp.result );
	}

protected:

	/* REXDR::IMessage::Load() */
	virtual bool Load( const REXDR::Value& value )
	{
		/* string userid */
		if ( false == REXDR::ValueHandler::Load<std::string>( &( this->userid ), value["userid"] ) ) {
			SetLastError( "userid", "string", value["userid"] );
			return false;
		}

		/* uint32_t sessionid */
		if ( false == REXDR::ValueHandler::Load<uint32_t>( &( this->sessionid ), value["sessionid"] ) ) {
			SetLastError( "sessionid", "uint32_t", value["sessionid"] );
			return false;
		}

		/* string gameid */
		if ( false == REXDR::ValueHandler::Load<std::string>( &( this->gameid ), value["gameid"] ) ) {
			SetLastError( "gameid", "string", value["gameid"] );
			return false;
		}

		/* string channelid */
		if ( false == REXDR::ValueHandler::Load<std::string>( &( this->channelid ), value["channelid"] ) ) {
			SetLastError( "channelid", "string", value["channelid"] );
			return false;
		}

		/* uint32_t sessionstatus */
		if ( false == REXDR::ValueHandler::Load<uint32_t>( &( this->sessionstatus ), value["sessionstatus"] ) ) {
			SetLastError( "sessionstatus", "uint32_t", value["sessionstatus"] );
			return false;
		}

		/* uint32_t errorcode */
		if ( false == REXDR::ValueHandler::Load<uint32_t>( &( this->errorcode ), value["errorcode"] ) ) {
			SetLastError( "errorcode", "uint32_t", value["errorcode"] );
			return false;
		}

		return true;
	}

public:

	std::string GetLastError( size_t depth = 0 ) const
	{
		if ( true == _lastErrorField.empty() ) {
			return "";
		}

		std::string lastError = _lastErrorField;
		if ( 0 == depth ) {
			lastError = "Cannot load \"QueryUserSessionStatusResponse::" + lastError;
		}

		bool detail = false;

		if ( false == detail ) {
			lastError.append( "\"; " ).append( _lastErrorDetail );
		}

		return lastError;
	}

private:

	void SetLastError( const char* field, const char* expected, const REXDR::Value& actual )
	{
		_lastErrorField = field;
		_lastErrorDetail = "expected="; _lastErrorDetail += expected;
		_lastErrorDetail += ", actual="; _lastErrorDetail += REXDR::Value::typeToString( actual.type() );

		if ( REXDR::Value::TYPE_INT == actual.type() ) {
			if ( 0 == ::strncmp( expected, "int", 3 ) || 0 == ::strncmp( expected, "uint", 4 ) ) {
				_lastErrorDetail += " (out of range)";
			}
		}

		if ( REXDR::Value::TYPE_NULL == actual.type() ) {
			_lastErrorDetail += " (null or not exists)";
		}
	}

public:

	/* [RE]XDR::IMessage::Clear() */
	virtual void Clear()
	{
		/* user-defined member */
		userid.clear();
		sessionid = 0;
		gameid.clear();
		channelid.clear();
		sessionstatus = 0;
		errorcode = 0;
	}

public:

	/* [RE]XDR::IMessage::GetID() */
	virtual int32_t GetID() const
	{
		return _msgID;
	}

public:

	/* [RE]XDR::IMessage::GetName() */
	virtual const char* GetName() const
	{
		return "QueryUserSessionStatusResponse";
	}

};
/* end of class QueryUserSessionStatusResponse */

#endif /* __REXDR_MESSAGE_CLASS_QUERYUSERSESSIONSTATUSRESPONSE_ID_37667034_DECLARED__ */


#ifndef __REXDR_MESSAGE_CLASS_UPDATEUSERSESSIONSTATUS_ID_15092490_DECLARED__
#define __REXDR_MESSAGE_CLASS_UPDATEUSERSESSIONSTATUS_ID_15092490_DECLARED__

/* class UpdateUserSessionStatus */
class UpdateUserSessionStatus : public REXDR::IRequestMessage
{
public:

	/* message id */
	enum { tagMsgID = 15092490 };

protected:

	int32_t _msgID;
	std::string _lastErrorField, _lastErrorDetail;

public:

	/* default data fields for request message */
	const REXDR::Command command;
	REXDR::Resource resource;
	REXDR::Option option;

	/* user defined data fields */
	std::string userid;
	uint32_t sessionid;
	std::string gameid;
	std::string channelid;
	std::string reserve;

public:

	/* constructor */
	UpdateUserSessionStatus() :
		command( REXDR::CMD_POST ), resource( "/stallon/usersession" ), option()
	{
		_msgID = tagMsgID;

		/* user-defined member */
		sessionid = 0;
	}

	UpdateUserSessionStatus( const UpdateUserSessionStatus& rhs ) :
		command( REXDR::CMD_POST )
	{
		_msgID = tagMsgID;

		_copy( rhs );
	}

	UpdateUserSessionStatus& operator=( const UpdateUserSessionStatus& rhs )
	{
		if ( this == &rhs ) {
			return *this;
		}

		_copy( rhs );
		return *this;
	}

private:

	void _copy( const UpdateUserSessionStatus& from )
	{
		_msgID = from._msgID;

		_lastErrorField.clear();
		_lastErrorDetail.clear();

		this->resource = from.resource;
		this->option = from.option;

		/* user-defined member */
		this->userid = from.userid;
		this->sessionid = from.sessionid;
		this->gameid = from.gameid;
		this->channelid = from.channelid;
		this->reserve = from.reserve;
	}

public:

	/* destructor */
	virtual ~UpdateUserSessionStatus()
	{
	}

public:

	/* REXDR::IRequestMessage::Save() */
	virtual bool Save( REXDR::Request* req ) const
	{
		req->messageID = this->GetID();

		req->command = command;
		req->resource = resource;
		req->option = option;

		return Save( &( req->param ) );
	}

protected:

	/* REXDR::IMessage::Save() */
	virtual bool Save( REXDR::Value* value ) const
	{
		value->set( REXDR::Value::TYPE_MAP );

		/* string userid */
		(*value)["userid"] = this->userid;

		/* uint32_t sessionid */
		(*value)["sessionid"] = this->sessionid;

		/* string gameid */
		(*value)["gameid"] = this->gameid;

		/* string channelid */
		(*value)["channelid"] = this->channelid;

		/* string reserve */
		(*value)["reserve"] = this->reserve;

		value->messageID = this->GetID();

		return true;
	}

public:

	/* REXDR::IRequestMessage::Load() */
	virtual bool Load( const REXDR::Request& req )
	{
		/* command */
		if ( command != req.command ) {
			return false;
		}

		/*
		 * resource
		 */
		resource = req.resource;

		/*
		 * option
		 */
		option = req.option;

		/*
		 * param
		 */
		return Load( req.param );
	}

protected:

	/* REXDR::IMessage::Load() */
	virtual bool Load( const REXDR::Value& value )
	{
		/* string userid */
		if ( false == REXDR::ValueHandler::Load<std::string>( &( this->userid ), value["userid"] ) ) {
			SetLastError( "userid", "string", value["userid"] );
			return false;
		}

		/* uint32_t sessionid */
		if ( false == REXDR::ValueHandler::Load<uint32_t>( &( this->sessionid ), value["sessionid"] ) ) {
			SetLastError( "sessionid", "uint32_t", value["sessionid"] );
			return false;
		}

		/* string gameid */
		if ( false == REXDR::ValueHandler::Load<std::string>( &( this->gameid ), value["gameid"] ) ) {
			SetLastError( "gameid", "string", value["gameid"] );
			return false;
		}

		/* string channelid */
		if ( false == REXDR::ValueHandler::Load<std::string>( &( this->channelid ), value["channelid"] ) ) {
			SetLastError( "channelid", "string", value["channelid"] );
			return false;
		}

		/* string reserve */
		if ( false == REXDR::ValueHandler::Load<std::string>( &( this->reserve ), value["reserve"] ) ) {
			SetLastError( "reserve", "string", value["reserve"] );
			return false;
		}

		return true;
	}

public:

	std::string GetLastError( size_t depth = 0 ) const
	{
		if ( true == _lastErrorField.empty() ) {
			return "";
		}

		std::string lastError = _lastErrorField;
		if ( 0 == depth ) {
			lastError = "Cannot load \"UpdateUserSessionStatus::" + lastError;
		}

		bool detail = false;

		if ( false == detail ) {
			lastError.append( "\"; " ).append( _lastErrorDetail );
		}

		return lastError;
	}

private:

	void SetLastError( const char* field, const char* expected, const REXDR::Value& actual )
	{
		_lastErrorField = field;
		_lastErrorDetail = "expected="; _lastErrorDetail += expected;
		_lastErrorDetail += ", actual="; _lastErrorDetail += REXDR::Value::typeToString( actual.type() );

		if ( REXDR::Value::TYPE_INT == actual.type() ) {
			if ( 0 == ::strncmp( expected, "int", 3 ) || 0 == ::strncmp( expected, "uint", 4 ) ) {
				_lastErrorDetail += " (out of range)";
			}
		}

		if ( REXDR::Value::TYPE_NULL == actual.type() ) {
			_lastErrorDetail += " (null or not exists)";
		}
	}

public:

	/* [RE]XDR::IMessage::Clear() */
	virtual void Clear()
	{
		/* user-defined member */
		userid.clear();
		sessionid = 0;
		gameid.clear();
		channelid.clear();
		reserve.clear();
	}

public:

	/* [RE]XDR::IMessage::GetID() */
	virtual int32_t GetID() const
	{
		return _msgID;
	}

public:

	/* [RE]XDR::IMessage::GetName() */
	virtual const char* GetName() const
	{
		return "UpdateUserSessionStatus";
	}

};
/* end of class UpdateUserSessionStatus */

#endif /* __REXDR_MESSAGE_CLASS_UPDATEUSERSESSIONSTATUS_ID_15092490_DECLARED__ */


#ifndef __REXDR_MESSAGE_CLASS_UPDATEUSERSESSIONSTATUSRESPONSE_ID_62400282_DECLARED__
#define __REXDR_MESSAGE_CLASS_UPDATEUSERSESSIONSTATUSRESPONSE_ID_62400282_DECLARED__

/* class UpdateUserSessionStatusResponse */
class UpdateUserSessionStatusResponse : public REXDR::IResponseMessage
{
public:

	/* message id */
	enum { tagMsgID = 62400282 };

protected:

	int32_t _msgID;
	std::string _lastErrorField, _lastErrorDetail;

public:

	/* default data fields for response message */
	REXDR::Status status;

	/* user defined data fields */
	std::string userid;
	uint32_t sessionid;
	uint32_t errorcode;

public:

	/* constructor */
	UpdateUserSessionStatusResponse()
	{
		_msgID = tagMsgID;

		/* user-defined member */
		sessionid = 0;
		errorcode = 0;
	}

	UpdateUserSessionStatusResponse( const UpdateUserSessionStatusResponse& rhs )
	{
		_msgID = tagMsgID;

		_copy( rhs );
	}

	UpdateUserSessionStatusResponse& operator=( const UpdateUserSessionStatusResponse& rhs )
	{
		if ( this == &rhs ) {
			return *this;
		}

		_copy( rhs );
		return *this;
	}

private:

	void _copy( const UpdateUserSessionStatusResponse& from )
	{
		_msgID = from._msgID;

		_lastErrorField.clear();
		_lastErrorDetail.clear();

		this->status = from.status;

		/* user-defined member */
		this->userid = from.userid;
		this->sessionid = from.sessionid;
		this->errorcode = from.errorcode;
	}

public:

	/* destructor */
	virtual ~UpdateUserSessionStatusResponse()
	{
	}

public:

	/* REXDR::IResponseMessage::Save() */
	virtual bool Save( REXDR::Response* resp ) const
	{
		resp->messageID = this->GetID();

		resp->status = status;

		return Save( &( resp->result ) );
	}

protected:

	/* REXDR::IMessage::Save() */
	virtual bool Save( REXDR::Value* value ) const
	{
		value->set( REXDR::Value::TYPE_MAP );

		/* string userid */
		(*value)["userid"] = this->userid;

		/* uint32_t sessionid */
		(*value)["sessionid"] = this->sessionid;

		/* uint32_t errorcode */
		(*value)["errorcode"] = this->errorcode;

		value->messageID = this->GetID();

		return true;
	}

public:

	/* REXDR::IResponseMessage::Load() */
	virtual bool Load( const REXDR::Response& resp )
	{
		/* status */
		status = resp.status;

		/*
		 * result
		 */
		return Load( resp.result );
	}

protected:

	/* REXDR::IMessage::Load() */
	virtual bool Load( const REXDR::Value& value )
	{
		/* string userid */
		if ( false == REXDR::ValueHandler::Load<std::string>( &( this->userid ), value["userid"] ) ) {
			SetLastError( "userid", "string", value["userid"] );
			return false;
		}

		/* uint32_t sessionid */
		if ( false == REXDR::ValueHandler::Load<uint32_t>( &( this->sessionid ), value["sessionid"] ) ) {
			SetLastError( "sessionid", "uint32_t", value["sessionid"] );
			return false;
		}

		/* uint32_t errorcode */
		if ( false == REXDR::ValueHandler::Load<uint32_t>( &( this->errorcode ), value["errorcode"] ) ) {
			SetLastError( "errorcode", "uint32_t", value["errorcode"] );
			return false;
		}

		return true;
	}

public:

	std::string GetLastError( size_t depth = 0 ) const
	{
		if ( true == _lastErrorField.empty() ) {
			return "";
		}

		std::string lastError = _lastErrorField;
		if ( 0 == depth ) {
			lastError = "Cannot load \"UpdateUserSessionStatusResponse::" + lastError;
		}

		bool detail = false;

		if ( false == detail ) {
			lastError.append( "\"; " ).append( _lastErrorDetail );
		}

		return lastError;
	}

private:

	void SetLastError( const char* field, const char* expected, const REXDR::Value& actual )
	{
		_lastErrorField = field;
		_lastErrorDetail = "expected="; _lastErrorDetail += expected;
		_lastErrorDetail += ", actual="; _lastErrorDetail += REXDR::Value::typeToString( actual.type() );

		if ( REXDR::Value::TYPE_INT == actual.type() ) {
			if ( 0 == ::strncmp( expected, "int", 3 ) || 0 == ::strncmp( expected, "uint", 4 ) ) {
				_lastErrorDetail += " (out of range)";
			}
		}

		if ( REXDR::Value::TYPE_NULL == actual.type() ) {
			_lastErrorDetail += " (null or not exists)";
		}
	}

public:

	/* [RE]XDR::IMessage::Clear() */
	virtual void Clear()
	{
		/* user-defined member */
		userid.clear();
		sessionid = 0;
		errorcode = 0;
	}

public:

	/* [RE]XDR::IMessage::GetID() */
	virtual int32_t GetID() const
	{
		return _msgID;
	}

public:

	/* [RE]XDR::IMessage::GetName() */
	virtual const char* GetName() const
	{
		return "UpdateUserSessionStatusResponse";
	}

};
/* end of class UpdateUserSessionStatusResponse */

#endif /* __REXDR_MESSAGE_CLASS_UPDATEUSERSESSIONSTATUSRESPONSE_ID_62400282_DECLARED__ */


#endif /* __REXDR_REXDR_CS_MESSAGES_H_28FB3B4E_4F42_11E2_91E1_005056C00008__ */

